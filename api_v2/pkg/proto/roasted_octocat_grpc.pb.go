// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/roasted_octocat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OctoRoasterAPI_Ping_FullMethodName                  = "/roastedoctocat.OctoRoasterAPI/Ping"
	OctoRoasterAPI_OAuth_FullMethodName                 = "/roastedoctocat.OctoRoasterAPI/OAuth"
	OctoRoasterAPI_Refresh_FullMethodName               = "/roastedoctocat.OctoRoasterAPI/Refresh"
	OctoRoasterAPI_WhoAmI_FullMethodName                = "/roastedoctocat.OctoRoasterAPI/WhoAmI"
	OctoRoasterAPI_ParseGithub_FullMethodName           = "/roastedoctocat.OctoRoasterAPI/ParseGithub"
	OctoRoasterAPI_GetParsedGithubResult_FullMethodName = "/roastedoctocat.OctoRoasterAPI/GetParsedGithubResult"
)

// OctoRoasterAPIClient is the client API for OctoRoasterAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OctoRoasterAPIClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	OAuth(ctx context.Context, in *OAuthRequest, opts ...grpc.CallOption) (*OAuthResponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*OAuthResponse, error)
	WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error)
	ParseGithub(ctx context.Context, in *ParseGithubRequest, opts ...grpc.CallOption) (*ParseGithubResponse, error)
	GetParsedGithubResult(ctx context.Context, in *GetParsedGithubResultRequest, opts ...grpc.CallOption) (*GetParsedGithubResultResponse, error)
}

type octoRoasterAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewOctoRoasterAPIClient(cc grpc.ClientConnInterface) OctoRoasterAPIClient {
	return &octoRoasterAPIClient{cc}
}

func (c *octoRoasterAPIClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, OctoRoasterAPI_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octoRoasterAPIClient) OAuth(ctx context.Context, in *OAuthRequest, opts ...grpc.CallOption) (*OAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OAuthResponse)
	err := c.cc.Invoke(ctx, OctoRoasterAPI_OAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octoRoasterAPIClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*OAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OAuthResponse)
	err := c.cc.Invoke(ctx, OctoRoasterAPI_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octoRoasterAPIClient) WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhoAmIResponse)
	err := c.cc.Invoke(ctx, OctoRoasterAPI_WhoAmI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octoRoasterAPIClient) ParseGithub(ctx context.Context, in *ParseGithubRequest, opts ...grpc.CallOption) (*ParseGithubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseGithubResponse)
	err := c.cc.Invoke(ctx, OctoRoasterAPI_ParseGithub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octoRoasterAPIClient) GetParsedGithubResult(ctx context.Context, in *GetParsedGithubResultRequest, opts ...grpc.CallOption) (*GetParsedGithubResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParsedGithubResultResponse)
	err := c.cc.Invoke(ctx, OctoRoasterAPI_GetParsedGithubResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OctoRoasterAPIServer is the server API for OctoRoasterAPI service.
// All implementations must embed UnimplementedOctoRoasterAPIServer
// for forward compatibility.
type OctoRoasterAPIServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	OAuth(context.Context, *OAuthRequest) (*OAuthResponse, error)
	Refresh(context.Context, *RefreshRequest) (*OAuthResponse, error)
	WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error)
	ParseGithub(context.Context, *ParseGithubRequest) (*ParseGithubResponse, error)
	GetParsedGithubResult(context.Context, *GetParsedGithubResultRequest) (*GetParsedGithubResultResponse, error)
	mustEmbedUnimplementedOctoRoasterAPIServer()
}

// UnimplementedOctoRoasterAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOctoRoasterAPIServer struct{}

func (UnimplementedOctoRoasterAPIServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedOctoRoasterAPIServer) OAuth(context.Context, *OAuthRequest) (*OAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuth not implemented")
}
func (UnimplementedOctoRoasterAPIServer) Refresh(context.Context, *RefreshRequest) (*OAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedOctoRoasterAPIServer) WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedOctoRoasterAPIServer) ParseGithub(context.Context, *ParseGithubRequest) (*ParseGithubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseGithub not implemented")
}
func (UnimplementedOctoRoasterAPIServer) GetParsedGithubResult(context.Context, *GetParsedGithubResultRequest) (*GetParsedGithubResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParsedGithubResult not implemented")
}
func (UnimplementedOctoRoasterAPIServer) mustEmbedUnimplementedOctoRoasterAPIServer() {}
func (UnimplementedOctoRoasterAPIServer) testEmbeddedByValue()                        {}

// UnsafeOctoRoasterAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OctoRoasterAPIServer will
// result in compilation errors.
type UnsafeOctoRoasterAPIServer interface {
	mustEmbedUnimplementedOctoRoasterAPIServer()
}

func RegisterOctoRoasterAPIServer(s grpc.ServiceRegistrar, srv OctoRoasterAPIServer) {
	// If the following call pancis, it indicates UnimplementedOctoRoasterAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OctoRoasterAPI_ServiceDesc, srv)
}

func _OctoRoasterAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctoRoasterAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OctoRoasterAPI_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctoRoasterAPIServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OctoRoasterAPI_OAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctoRoasterAPIServer).OAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OctoRoasterAPI_OAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctoRoasterAPIServer).OAuth(ctx, req.(*OAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OctoRoasterAPI_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctoRoasterAPIServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OctoRoasterAPI_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctoRoasterAPIServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OctoRoasterAPI_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctoRoasterAPIServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OctoRoasterAPI_WhoAmI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctoRoasterAPIServer).WhoAmI(ctx, req.(*WhoAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OctoRoasterAPI_ParseGithub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseGithubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctoRoasterAPIServer).ParseGithub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OctoRoasterAPI_ParseGithub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctoRoasterAPIServer).ParseGithub(ctx, req.(*ParseGithubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OctoRoasterAPI_GetParsedGithubResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParsedGithubResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctoRoasterAPIServer).GetParsedGithubResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OctoRoasterAPI_GetParsedGithubResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctoRoasterAPIServer).GetParsedGithubResult(ctx, req.(*GetParsedGithubResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OctoRoasterAPI_ServiceDesc is the grpc.ServiceDesc for OctoRoasterAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OctoRoasterAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roastedoctocat.OctoRoasterAPI",
	HandlerType: (*OctoRoasterAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _OctoRoasterAPI_Ping_Handler,
		},
		{
			MethodName: "OAuth",
			Handler:    _OctoRoasterAPI_OAuth_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _OctoRoasterAPI_Refresh_Handler,
		},
		{
			MethodName: "WhoAmI",
			Handler:    _OctoRoasterAPI_WhoAmI_Handler,
		},
		{
			MethodName: "ParseGithub",
			Handler:    _OctoRoasterAPI_ParseGithub_Handler,
		},
		{
			MethodName: "GetParsedGithubResult",
			Handler:    _OctoRoasterAPI_GetParsedGithubResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/roasted_octocat.proto",
}
