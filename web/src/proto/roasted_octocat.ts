// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "roasted_octocat.proto" (package "roastedoctocat", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message roastedoctocat.GetParsedGithubResultRequest
 */
export interface GetParsedGithubResultRequest {
    /**
     * @generated from protobuf field: string githubToken = 1
     */
    githubToken: string;
    /**
     * @generated from protobuf field: string idempotencyToken = 2
     */
    idempotencyToken: string;
}
/**
 * @generated from protobuf message roastedoctocat.GetParsedGithubResultResponse
 */
export interface GetParsedGithubResultResponse {
    /**
     * @generated from protobuf field: string status = 1
     */
    status: string;
    /**
     * @generated from protobuf field: optional string result = 2
     */
    result?: string;
    /**
     * @generated from protobuf field: optional string error = 3
     */
    error?: string;
}
/**
 * @generated from protobuf message roastedoctocat.ParseGithubRequest
 */
export interface ParseGithubRequest {
    /**
     * @generated from protobuf field: string githubToken = 1
     */
    githubToken: string;
    /**
     * @generated from protobuf field: string idempotencyToken = 2
     */
    idempotencyToken: string;
    /**
     * @generated from protobuf field: roastedoctocat.ModelPromptType promptType = 3
     */
    promptType: ModelPromptType;
}
/**
 * @generated from protobuf message roastedoctocat.ParseGithubResponse
 */
export interface ParseGithubResponse {
    /**
     * @generated from protobuf field: string idempotencyToken = 1
     */
    idempotencyToken: string;
}
/**
 * @generated from protobuf message roastedoctocat.WhoAmIRequest
 */
export interface WhoAmIRequest {
    /**
     * @generated from protobuf field: string githubToken = 1
     */
    githubToken: string;
}
/**
 * @generated from protobuf message roastedoctocat.WhoAmIResponse
 */
export interface WhoAmIResponse {
    /**
     * @generated from protobuf field: string username = 1
     */
    username: string;
    /**
     * @generated from protobuf field: string bio = 2
     */
    bio: string;
}
/**
 * @generated from protobuf message roastedoctocat.RefreshRequest
 */
export interface RefreshRequest {
    /**
     * @generated from protobuf field: string clientId = 1
     */
    clientId: string;
    /**
     * @generated from protobuf field: string refreshToken = 2
     */
    refreshToken: string;
}
/**
 * @generated from protobuf message roastedoctocat.OAuthRequest
 */
export interface OAuthRequest {
    /**
     * @generated from protobuf field: string clientId = 1
     */
    clientId: string;
    /**
     * @generated from protobuf field: string code = 2
     */
    code: string;
    /**
     * @generated from protobuf field: string redirectUri = 3
     */
    redirectUri: string;
    /**
     * @generated from protobuf field: string codeChallenge = 4
     */
    codeChallenge: string;
}
/**
 * @generated from protobuf message roastedoctocat.OAuthResponse
 */
export interface OAuthResponse {
    /**
     * @generated from protobuf field: string accessToken = 1
     */
    accessToken: string;
    /**
     * @generated from protobuf field: int32 accessTokenExpiry = 2
     */
    accessTokenExpiry: number;
    /**
     * @generated from protobuf field: string refreshToken = 3
     */
    refreshToken: string;
    /**
     * @generated from protobuf field: int32 refreshTokenExpiry = 4
     */
    refreshTokenExpiry: number;
}
/**
 * @generated from protobuf message roastedoctocat.PingRequest
 */
export interface PingRequest {
    /**
     * @generated from protobuf field: string idempotencyToken = 1
     */
    idempotencyToken: string;
}
/**
 * @generated from protobuf message roastedoctocat.PingResponse
 */
export interface PingResponse {
    /**
     * @generated from protobuf field: string message = 1
     */
    message: string;
    /**
     * @generated from protobuf field: string serverVersion = 2
     */
    serverVersion: string;
    /**
     * @generated from protobuf field: string idempotencyToken = 3
     */
    idempotencyToken: string;
}
/**
 * @generated from protobuf enum roastedoctocat.ModelPromptType
 */
export enum ModelPromptType {
    /**
     * @generated from protobuf enum value: ModelPromptType_EARLY2000s = 0;
     */
    ModelPromptType_EARLY2000s = 0,
    /**
     * @generated from protobuf enum value: ModelPromptType_UWUIFIED = 1;
     */
    ModelPromptType_UWUIFIED = 1,
    /**
     * @generated from protobuf enum value: ModelPromptType_NERD = 2;
     */
    ModelPromptType_NERD = 2,
    /**
     * @generated from protobuf enum value: ModelPromptType_OLDENGLISH = 3;
     */
    ModelPromptType_OLDENGLISH = 3,
    /**
     * @generated from protobuf enum value: ModelPromptType_NICE = 4;
     */
    ModelPromptType_NICE = 4,
    /**
     * @generated from protobuf enum value: ModelPromptType_REGINAGEORGE = 5;
     */
    ModelPromptType_REGINAGEORGE = 5,
    /**
     * @generated from protobuf enum value: ModelPromptType_DISCORDMOD = 6;
     */
    ModelPromptType_DISCORDMOD = 6,
    /**
     * @generated from protobuf enum value: ModelPromptType_DCVILLIAN = 7;
     */
    ModelPromptType_DCVILLIAN = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class GetParsedGithubResultRequest$Type extends MessageType<GetParsedGithubResultRequest> {
    constructor() {
        super("roastedoctocat.GetParsedGithubResultRequest", [
            { no: 1, name: "githubToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "idempotencyToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetParsedGithubResultRequest>): GetParsedGithubResultRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.githubToken = "";
        message.idempotencyToken = "";
        if (value !== undefined)
            reflectionMergePartial<GetParsedGithubResultRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetParsedGithubResultRequest): GetParsedGithubResultRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string githubToken */ 1:
                    message.githubToken = reader.string();
                    break;
                case /* string idempotencyToken */ 2:
                    message.idempotencyToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetParsedGithubResultRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string githubToken = 1; */
        if (message.githubToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.githubToken);
        /* string idempotencyToken = 2; */
        if (message.idempotencyToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.idempotencyToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message roastedoctocat.GetParsedGithubResultRequest
 */
export const GetParsedGithubResultRequest = new GetParsedGithubResultRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetParsedGithubResultResponse$Type extends MessageType<GetParsedGithubResultResponse> {
    constructor() {
        super("roastedoctocat.GetParsedGithubResultResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "result", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "error", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetParsedGithubResultResponse>): GetParsedGithubResultResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<GetParsedGithubResultResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetParsedGithubResultResponse): GetParsedGithubResultResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                case /* optional string result */ 2:
                    message.result = reader.string();
                    break;
                case /* optional string error */ 3:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetParsedGithubResultResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        /* optional string result = 2; */
        if (message.result !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.result);
        /* optional string error = 3; */
        if (message.error !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message roastedoctocat.GetParsedGithubResultResponse
 */
export const GetParsedGithubResultResponse = new GetParsedGithubResultResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParseGithubRequest$Type extends MessageType<ParseGithubRequest> {
    constructor() {
        super("roastedoctocat.ParseGithubRequest", [
            { no: 1, name: "githubToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "idempotencyToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "promptType", kind: "enum", T: () => ["roastedoctocat.ModelPromptType", ModelPromptType] }
        ]);
    }
    create(value?: PartialMessage<ParseGithubRequest>): ParseGithubRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.githubToken = "";
        message.idempotencyToken = "";
        message.promptType = 0;
        if (value !== undefined)
            reflectionMergePartial<ParseGithubRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParseGithubRequest): ParseGithubRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string githubToken */ 1:
                    message.githubToken = reader.string();
                    break;
                case /* string idempotencyToken */ 2:
                    message.idempotencyToken = reader.string();
                    break;
                case /* roastedoctocat.ModelPromptType promptType */ 3:
                    message.promptType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParseGithubRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string githubToken = 1; */
        if (message.githubToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.githubToken);
        /* string idempotencyToken = 2; */
        if (message.idempotencyToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.idempotencyToken);
        /* roastedoctocat.ModelPromptType promptType = 3; */
        if (message.promptType !== 0)
            writer.tag(3, WireType.Varint).int32(message.promptType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message roastedoctocat.ParseGithubRequest
 */
export const ParseGithubRequest = new ParseGithubRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParseGithubResponse$Type extends MessageType<ParseGithubResponse> {
    constructor() {
        super("roastedoctocat.ParseGithubResponse", [
            { no: 1, name: "idempotencyToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ParseGithubResponse>): ParseGithubResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.idempotencyToken = "";
        if (value !== undefined)
            reflectionMergePartial<ParseGithubResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParseGithubResponse): ParseGithubResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string idempotencyToken */ 1:
                    message.idempotencyToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParseGithubResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string idempotencyToken = 1; */
        if (message.idempotencyToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.idempotencyToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message roastedoctocat.ParseGithubResponse
 */
export const ParseGithubResponse = new ParseGithubResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAmIRequest$Type extends MessageType<WhoAmIRequest> {
    constructor() {
        super("roastedoctocat.WhoAmIRequest", [
            { no: 1, name: "githubToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WhoAmIRequest>): WhoAmIRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.githubToken = "";
        if (value !== undefined)
            reflectionMergePartial<WhoAmIRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAmIRequest): WhoAmIRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string githubToken */ 1:
                    message.githubToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhoAmIRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string githubToken = 1; */
        if (message.githubToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.githubToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message roastedoctocat.WhoAmIRequest
 */
export const WhoAmIRequest = new WhoAmIRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhoAmIResponse$Type extends MessageType<WhoAmIResponse> {
    constructor() {
        super("roastedoctocat.WhoAmIResponse", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bio", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WhoAmIResponse>): WhoAmIResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        message.bio = "";
        if (value !== undefined)
            reflectionMergePartial<WhoAmIResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoAmIResponse): WhoAmIResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string bio */ 2:
                    message.bio = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhoAmIResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string bio = 2; */
        if (message.bio !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bio);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message roastedoctocat.WhoAmIResponse
 */
export const WhoAmIResponse = new WhoAmIResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshRequest$Type extends MessageType<RefreshRequest> {
    constructor() {
        super("roastedoctocat.RefreshRequest", [
            { no: 1, name: "clientId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "refreshToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RefreshRequest>): RefreshRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientId = "";
        message.refreshToken = "";
        if (value !== undefined)
            reflectionMergePartial<RefreshRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefreshRequest): RefreshRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string clientId */ 1:
                    message.clientId = reader.string();
                    break;
                case /* string refreshToken */ 2:
                    message.refreshToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RefreshRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string clientId = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        /* string refreshToken = 2; */
        if (message.refreshToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.refreshToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message roastedoctocat.RefreshRequest
 */
export const RefreshRequest = new RefreshRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OAuthRequest$Type extends MessageType<OAuthRequest> {
    constructor() {
        super("roastedoctocat.OAuthRequest", [
            { no: 1, name: "clientId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "redirectUri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "codeChallenge", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OAuthRequest>): OAuthRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientId = "";
        message.code = "";
        message.redirectUri = "";
        message.codeChallenge = "";
        if (value !== undefined)
            reflectionMergePartial<OAuthRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OAuthRequest): OAuthRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string clientId */ 1:
                    message.clientId = reader.string();
                    break;
                case /* string code */ 2:
                    message.code = reader.string();
                    break;
                case /* string redirectUri */ 3:
                    message.redirectUri = reader.string();
                    break;
                case /* string codeChallenge */ 4:
                    message.codeChallenge = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OAuthRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string clientId = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        /* string code = 2; */
        if (message.code !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.code);
        /* string redirectUri = 3; */
        if (message.redirectUri !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.redirectUri);
        /* string codeChallenge = 4; */
        if (message.codeChallenge !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.codeChallenge);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message roastedoctocat.OAuthRequest
 */
export const OAuthRequest = new OAuthRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OAuthResponse$Type extends MessageType<OAuthResponse> {
    constructor() {
        super("roastedoctocat.OAuthResponse", [
            { no: 1, name: "accessToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "accessTokenExpiry", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "refreshToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "refreshTokenExpiry", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<OAuthResponse>): OAuthResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accessToken = "";
        message.accessTokenExpiry = 0;
        message.refreshToken = "";
        message.refreshTokenExpiry = 0;
        if (value !== undefined)
            reflectionMergePartial<OAuthResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OAuthResponse): OAuthResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string accessToken */ 1:
                    message.accessToken = reader.string();
                    break;
                case /* int32 accessTokenExpiry */ 2:
                    message.accessTokenExpiry = reader.int32();
                    break;
                case /* string refreshToken */ 3:
                    message.refreshToken = reader.string();
                    break;
                case /* int32 refreshTokenExpiry */ 4:
                    message.refreshTokenExpiry = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OAuthResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string accessToken = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* int32 accessTokenExpiry = 2; */
        if (message.accessTokenExpiry !== 0)
            writer.tag(2, WireType.Varint).int32(message.accessTokenExpiry);
        /* string refreshToken = 3; */
        if (message.refreshToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.refreshToken);
        /* int32 refreshTokenExpiry = 4; */
        if (message.refreshTokenExpiry !== 0)
            writer.tag(4, WireType.Varint).int32(message.refreshTokenExpiry);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message roastedoctocat.OAuthResponse
 */
export const OAuthResponse = new OAuthResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingRequest$Type extends MessageType<PingRequest> {
    constructor() {
        super("roastedoctocat.PingRequest", [
            { no: 1, name: "idempotencyToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingRequest>): PingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.idempotencyToken = "";
        if (value !== undefined)
            reflectionMergePartial<PingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingRequest): PingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string idempotencyToken */ 1:
                    message.idempotencyToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string idempotencyToken = 1; */
        if (message.idempotencyToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.idempotencyToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message roastedoctocat.PingRequest
 */
export const PingRequest = new PingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingResponse$Type extends MessageType<PingResponse> {
    constructor() {
        super("roastedoctocat.PingResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "serverVersion", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "idempotencyToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingResponse>): PingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        message.serverVersion = "";
        message.idempotencyToken = "";
        if (value !== undefined)
            reflectionMergePartial<PingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingResponse): PingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                case /* string serverVersion */ 2:
                    message.serverVersion = reader.string();
                    break;
                case /* string idempotencyToken */ 3:
                    message.idempotencyToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* string serverVersion = 2; */
        if (message.serverVersion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.serverVersion);
        /* string idempotencyToken = 3; */
        if (message.idempotencyToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.idempotencyToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message roastedoctocat.PingResponse
 */
export const PingResponse = new PingResponse$Type();
/**
 * @generated ServiceType for protobuf service roastedoctocat.OctoRoasterAPI
 */
export const OctoRoasterAPI = new ServiceType("roastedoctocat.OctoRoasterAPI", [
    { name: "Ping", options: {}, I: PingRequest, O: PingResponse },
    { name: "OAuth", options: {}, I: OAuthRequest, O: OAuthResponse },
    { name: "Refresh", options: {}, I: RefreshRequest, O: OAuthResponse },
    { name: "WhoAmI", options: {}, I: WhoAmIRequest, O: WhoAmIResponse },
    { name: "ParseGithub", options: {}, I: ParseGithubRequest, O: ParseGithubResponse },
    { name: "GetParsedGithubResult", options: {}, I: GetParsedGithubResultRequest, O: GetParsedGithubResultResponse }
]);
